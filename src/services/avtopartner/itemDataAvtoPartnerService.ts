import * as cheerio from 'cheerio';
import { AnyNode } from 'domhandler';
import { v4 as uuidv4 } from 'uuid';
import { logger } from '../../config/logger/index.js';

import { calculateDeliveryDate } from '../../utils/calculateDates/calculateDeliveryDate.js';
import { isRelevantBrand } from '../../utils/data/brand/isRelevantBrand.js';
import { clientAvtoPartner } from './client.js';
import { ensureAvtoPartnerLoggedIn } from './loginAvtoPartner.js';
import { ParallelSearchParams, SearchResultsParsed } from '../../types/search.types.js';

const baseURL = 'https://avtopartner-yug.ru';
const userAgent =
  'Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:143.0) Gecko/20100101 Firefox/143.0';

// –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –ø—Ä–∏—Å–≤–æ–µ–Ω–∏—è —Ç–æ–≤–∞—Ä—É
const AVTOPARTNER_CONSTANTS = {
  WAREHOUSE: '–°–≤–æ–π',
  PROBABILITY: 95,
  DEADLINE: 4,
  DEADLINE_MAX: 4,
} as const;

/**
 * üß© –£–±–∏—Ä–∞–µ—Ç –ø—Ä–æ–±–µ–ª—ã, –¥–µ—Ñ–∏—Å—ã –∏ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç –≤ lowercase –¥–ª—è —É–Ω–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∞—Ä—Ç–∏–∫—É–ª–æ–≤
 */
const normalizeForComparison = (str: string): string =>
  str.toLowerCase().replace(/[\s-]/g, '');

/**
 * üß© –ü–∞—Ä—Å–∏—Ç –∫–∞—Ä—Ç–æ—á–∫—É —Ç–æ–≤–∞—Ä–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –ø–æ–∏—Å–∫–∞.
 * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç null, –µ—Å–ª–∏ –∫–∞—Ä—Ç–æ—á–∫–∞ –Ω–µ–ø–æ–ª–Ω–∞—è, –Ω–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏, –∏–ª–∏ –±–µ–∑ —Ü–µ–Ω—ã.
 */
const parseProductCard = (
  $: cheerio.CheerioAPI,
  el: AnyNode
): Omit<
  SearchResultsParsed,
  'id' | 'supplier' | 'probability' | 'deadline' | 'deadLineMax'
> | null => {
  const card = $(el);

  const article = card.find('.product-card__sku').text().replace('–ê—Ä—Ç.:', '').trim();
  const brand = card.find('.product-card__brand [itemprop="name"]').text().trim();
  const description = card.find('.product-card__title').text().trim();

  // üß© –£–¥–∞–ª—è–µ–º –≤–ª–æ–∂–µ–Ω–Ω—ã–µ —Ç–µ–≥–∏ (—Ä—É–±–ª–∏, span –∏ —Ç.–ø.)
  const priceText = card.find('.product-card__price--list .price__current')
    .clone()
    .children()
    .remove()
    .end()
    .text()
    .replace(',', '.')
    .replace(/\s+/g, '')
    .trim();

  const price = parseFloat(priceText.replace(/[^0-9.]/g, '')) || 0;

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–æ–≤–∞—Ä –≤ –Ω–∞–ª–∏—á–∏–∏
  const isOutOfStock = card.find('.product-post__status.out-of-stock').length > 0;

  // ‚ùó –ù–û–í–û–ï –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ï—Å–ª–∏ —Ç–æ–≤–∞—Ä–∞ –Ω–µ—Ç, —Å—Ä–∞–∑—É –≤–æ–∑–≤—Ä–∞—â–∞–µ–º null
  if (isOutOfStock) {
    // logger.debug(`[avtoPartner] –ü—Ä–æ–ø—É—â–µ–Ω–∞ –∫–∞—Ä—Ç–æ—á–∫–∞ (–Ω–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏): ${brand} ${article}`);
    return null;
  }

  // –ï—Å–ª–∏ —Ç–æ–≤–∞—Ä –µ—Å—Ç—å, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—Å–µ–≥–¥–∞ –±—É–¥–µ—Ç '+'
  const availability = '+';

  const imageUrlRaw = card.find('.product-card__picture img').attr('src') || '';
  const imageUrl = imageUrlRaw.startsWith('http') ? imageUrlRaw : `${baseURL}${imageUrlRaw}`;

  // –°—Ç–∞—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–µ–ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—Å—Ç–∞–µ—Ç—Å—è
  if (!article || !brand || price <= 0) {
    logger.debug(`[avtoPartner] –ü—Ä–æ–ø—É—â–µ–Ω–∞ –∫–∞—Ä—Ç–æ—á–∫–∞ ‚Äî –Ω–µ–ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (${brand} ${article})`);
    return null;
  }

  return {
    article,
    brand,
    description,
    availability,
    price,
    imageUrl,
    warehouse: AVTOPARTNER_CONSTANTS.WAREHOUSE,
  };
};

/**
 * üîé –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–∞ –Ω–∞ avtopartner-yug.ru
 */
export const itemDataAvtoPartnerService = async ({
  item,
  supplier,
  userLogger,
}: ParallelSearchParams): Promise<SearchResultsParsed[]> => {
  // 1Ô∏è‚É£ –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
  await ensureAvtoPartnerLoggedIn();

  const searchUrl = `${baseURL}/search/${encodeURIComponent(item.article)}`;
  userLogger.info(`[${supplier}] –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–∏—Å–∫: ${searchUrl}`);

  try {
    // 2Ô∏è‚É£ –í—ã–ø–æ–ª–Ω—è–µ–º HTTP-–∑–∞–ø—Ä–æ—Å
    const response = await clientAvtoPartner.get(searchUrl, {
      headers: { 'User-Agent': userAgent },
      maxRedirects: 5,
    });

    const $ = cheerio.load(response.data);

    // 3Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º: —ç—Ç–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å –æ–¥–Ω–æ–π –∫–∞—Ä—Ç–æ—á–∫–æ–π?
    const productCards = $('article.product-card');
    const isSingleProductPage =
      productCards.length === 0 && $('.product-detail__content').length > 0;

    if (isSingleProductPage) {
      userLogger.info(`[${supplier}] –†–µ–¥–∏—Ä–µ–∫—Ç –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –æ–¥–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ (–ø—Ä–æ–ø—É—Å–∫–∞–µ–º)`);
      return [];
    }

    userLogger.info(`[${supplier}] –ù–∞–π–¥–µ–Ω–æ ${productCards.length} –∫–∞—Ä—Ç–æ—á–µ–∫`);

    const normalizedSearchArticle = normalizeForComparison(item.article);
    const results: SearchResultsParsed[] = [];

    // 4Ô∏è‚É£ –ü–∞—Ä—Å–∏–º –∫–∞—Ä—Ç–æ—á–∫–∏ –∏ —Ñ–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –±—Ä–µ–Ω–¥—É/–∞—Ä—Ç–∏–∫—É–ª—É
    productCards.each((_, element) => {
      const parsed = parseProductCard($, element);
      if (!parsed) return;

      const brandMatch = isRelevantBrand(item.brand, parsed.brand);
      const articleMatch =
        normalizeForComparison(parsed.article) === normalizedSearchArticle;
      const needToCheckBrand = isRelevantBrand(item.brand, parsed.brand);

      if (brandMatch && articleMatch) {
        results.push({
          ...parsed,
          id: uuidv4(),
          supplier,
          probability: AVTOPARTNER_CONSTANTS.PROBABILITY,
          deadline: AVTOPARTNER_CONSTANTS.DEADLINE,
          deadLineMax: AVTOPARTNER_CONSTANTS.DEADLINE_MAX,
          needToCheckBrand,
        });

        userLogger.info(
          `[${supplier}] ‚úÖ –°–æ–≤–ø–∞–¥–µ–Ω–∏–µ: ${parsed.brand} ${parsed.article} ‚Äî ${parsed.price} ‚ÇΩ`
        );
      }
    });

    // 5Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    if (results.length === 0) {
      userLogger.warn(`[${supplier}] –¢–æ–≤–∞—Ä ${item.brand} ${item.article} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
    }

    // 6Ô∏è‚É£ –ü–æ–¥—Å—á—ë—Ç –¥–∞—Ç—ã –¥–æ—Å—Ç–∞–≤–∫–∏
    return results.map((result) => ({
      ...result,
      deliveryDate: calculateDeliveryDate(result, userLogger),
    }));
  } catch (error) {
    const message = error instanceof Error ? error.message : 'Unknown error';
    logger.error(`[${supplier}] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Ç–æ–≤–∞—Ä–∞: ${message}`);
    userLogger.error(`[${supplier}] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Ç–æ–≤–∞—Ä–∞`);
    return [];
  }
};

